name: Pull Request Workflow

on:
  pull_request:
    branches:
      - main

jobs:
  pr-check:
    name: Test and Build on Pull Request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      # Check for test changes, skip condition, or empty commit
      - name: Check for test changes or skip condition
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if echo "$PR_TITLE" | grep -q "\[Skip Test\]"; then
            echo "Skipping tests and validation as per PR title '[Skip Test]'."
            exit 0
          fi

          DIFF_RESULT=$(git diff --name-only FETCH_HEAD)
          if [ -z "$DIFF_RESULT" ]; then
            echo "Warning: Empty commit detected. Proceeding with default tests."
          else
            echo "$DIFF_RESULT" | grep '\.test\.js' || (echo "Error: No test files detected in changes!" && exit 1)
          fi

      - name: Install dependencies
        working-directory: client
        run: npm install

      - name: Run tests with coverage
        working-directory: client
        run: |
          npm test -- --ci --detectOpenHandles --coverage --coverageReporters=text-summary --coverageReporters=json-summary

      - name: Upload Test Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: client/coverage

      - name: Build project
        working-directory: client
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: client/build

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'client/coverage/coverage-summary.json';
            const runId = process.env.GITHUB_RUN_ID;
            const coverageUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            let testSummary = 'Test coverage summary is unavailable.';
            const skipped = "${{ github.event.pull_request.title }}".includes('[Skip Test]');

            if (!skipped && fs.existsSync(summaryPath)) {
              const coverage = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              testSummary = `
                Statements: ${coverage.total.statements.pct}% (${coverage.total.statements.covered}/${coverage.total.statements.total})
                Branches: ${coverage.total.branches.pct}% (${coverage.total.branches.covered}/${coverage.total.branches.total})
                Functions: ${coverage.total.functions.pct}% (${coverage.total.functions.covered}/${coverage.total.functions.total})
                Lines: ${coverage.total.lines.pct}% (${coverage.total.lines.covered}/${coverage.total.lines.total})
              `;
            }

            if (!skipped && !fs.existsSync(summaryPath)) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### Test Results\n\n**Status:** Tests failed or coverage summary is unavailable.`
              });
              process.exit(1);
            }

            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: skipped
                ? `### Test Results\n\n**Status:** Tests were skipped as requested in the PR title.`
                : `### Test Results\n\n**Coverage Summary:**\n${testSummary}\n\n[Detailed Coverage Report](${coverageUrl})\n\n**Status:** All tests passed successfully!`
            });
